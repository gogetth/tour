แพ็กเกจ ตัวแปร และฟังก์ชั่น
เรียนรู้เกี่ยวกับส่วนประกอบพื้นฐานที่สำคัญของโปรแกรมที่เขียนด้วยภาษาโก

The Go Authors
https://golang.org

* Packages

ทุก ๆ โปรแกรมของภาษาโก จะถูกสร้างขึ้นจากแพ็กเกจต่าง ๆ

โปรแกรมเริ่มต้นทำงานในแพ็กเกจที่ชื่อ `main`

โปรแกรมนี้เรียกใช้งานแพ็กเกจด้วยการนำเข้าพาธ `"fmt"` และ `"math/rand"`

ตามธรรมเนียมปฏิบัติแล้ว ชื่อแพ็กเกจก็จะตรงกับองค์ประกอบสุดท้ายของพาธที่นำเข้ามา ตัวอย่างเช่น แพ็กเกจ `"math/rand"` จะประกอบด้วยไฟล์ที่ขึ้นต้นด้วยคำสั่ง `package`rand`

#appengine: *โปรดจำไว้ว่า:* สภาพแวดล้อมที่โปรแกรมถูกทำงานนี้นั้น
#appengine: อยู่ภายใต้ความควบคุม นั่นทำให้ทุกครั้งที่รันโปรแกรม
#appengine: `rand.Intn` จะคืนค่าเดียวกันเสมอ
#appengine:
#appengine: (ถ้าต้องการเห็นค่าที่ต่างจากเดิม ให้กำหนดค่า seed ที่ใช้ในการสร้างตัวผลิตเลข ดูต่อที่ [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]])
#appengine: เวลาจะเป็นค่าคงที่เมื่อลองเล่นใน playground ดังนั้นคุณจะต้องใช้อย่างอื่นเป็นค่า seed แทน

.play basics/packages.go

* Imports

โค้ดชุดนี้ ทำการรวมการ import ไว้ในวงเล็บ หรือการ "รวบ" ขั้นตอนการ import

หรือคุณอยากจะการ import หลาย ๆ ครั้งแบบนี้ก็ย่อมได้:

	import "fmt"
	import "math"

แต่มันจะเป็นรูปแบบการเขียนโปรแกรมที่ดีกว่าถ้าใช้การ import แบบรวบ

.play basics/imports.go

* Exported names

ในภาษาโก ชื่อใด ๆ ก็ตามจะถูกส่งออกภายนอกเมื่อมันขึ้นต้นด้วยอักษรตัวใหญ่
ตัวอย่างเช่น `Pizza` เป็นชื่อที่ถูกส่งออกภายนอก เหมือนกับที่ `Pi`, ถูกส่งออกมาจาก
แพ็กเกจ `math` 

`pizza` และ `pi` ไม่ได้ขึ้นต้นด้วยอักษรตัวใหญ่ มันจึงไม่ถูกส่งออกให้ภายนอกใช้

เมื่อนำเข้าแพ็กเกจใดก็ตาม คุณจะสามารถอ้างถึงได้เฉพาะชื่อที่ถูกส่งออกมาเท่านั้น
ชื่ออื่น ๆ ที่ "ไม่ได้ถูกส่งออก" จะไม่สามารถเข้าถึงจากภายนอกแพ็กเกจนั้นได้เลย

รันโค้ดนี้ แล้วสังเกตข้อความผิดพลาด

ทำการแก้ไขความผิดพลาดนี้ด้วยการแก้ไขชื่อ `math.pi` ไปเป็น `math.Pi` แล้วลองใหม่อีกครั้ง

.play basics/exported-names.go

* Functions

ฟังก์ชั่น สามารถรับอาร์กิวเมนต์ ศูนย์ตัว หรือมากกว่านั้นก็ได้

ในตัวอย่างนี้ `add` รับพารามิเตอร์สองตัว เป็นชนิด `int`

สังเกตว่าชนิดของตัวแปรจะอยู่ _ด้านหลัง_ ชื่อตัวแปรนั้น

(หากต้องการจะรู้ว่า ชนิดของตัวแปรต่าง ๆ เป็นอย่างไร ดูต่อได้ที่ [[https://blog.golang.org/gos-declaration-syntax][บทความในเรื่อง Go's declaration syntax]])

.play basics/functions.go

* Functions (ต่อ)

เมื่อมีพารามิเตอร์สองตัวติดกันหรือมากกว่านั้น เป็นตัวแปรชนิดเดียวกัน คุณสามารถเว้นการระบุชนิดตัวแปรได้และไปประกาศไว้ที่ตัวสุดท้ายทีเดียว

ในตัวอย่างนี้ เราจะย่อจาก

	x int, y int

เป็นแบบนี้

	x, y int

.play basics/functions-continued.go

* การคืนผลลัพธ์มากกว่าหนึ่ง

ฟังก์ชั่น สามารถคืนค่ากลับได้หลาย ๆ ค่า

ในตัวอย่างนี้ ฟังก์ชั่น `swap` คืนค่าเป็นข้อความสองค่า

.play basics/multiple-results.go

* การตั้งชื่อให้ค่าที่จะส่งคืน

ภาษาโกสามารถตั้งชื่อให้ตัวแปรที่จะส่งคืนได้ ซึ่งหากตั้งชื่อไว้ก่อน ตัวแปรพวกนี้จะถูกทำเหมือนกับว่ามันเป็นตัวแปรที่ถูกประกาศไว้ที่ด้านบนของฟังก์ชั่น

ชื่อพวกนี้ควรจะสื่อความหมายว่าค่าที่จะส่งคืนนั้นหมายถึงอะไร

การ `return` โดยไม่มีอะไรต่อท้าย จะเป็นการส่งคืนตัวแปรที่ตั้งชื่อไว้ เรียกอีกอย่างว่าการคืนค่าแบบ "เปลือย"

การคืนค่าแบบเปลือย ควรถูกใช้เฉพาะฟังก์ชั่นสั้น ๆ เหมือนในตัวอย่างนี้ เพราะมันอาจจะทำให้อ่านยากถ้าไปใช้ในฟังก์ชั่นที่ยาว ๆ

.play basics/named-results.go

* ตัวแปร

`var` ใช้ประกาศชุดของตัวแปร เหมือนประกาศชุดของอาร์กิวเม้นต์ในฟังก์ชั่น และใส่ชนิดของตัวแปรปิดท้าย

`var` จะอยู่ในระดับแพ็กเกจ หรือระดับของฟังก์ชั่นก็ได้ เราจะเห็นทั้งสองแบบจากตัวอย่าง

.play basics/variables.go

* ตัวแปรกับค่าเริ่มต้น

การประกาศตัวแปรสามารถกำหนดค่าเบื้องต้นไปพร้อมกันได้ ตัวแปรละหนึ่งค่า

ถ้ามีการกำหนดค่าเบื้องต้น สามารถยกเว้นการระบุชนิดตัวแปรได้ ตัวแปรจะใช้ชนิดของค่าเบื้องต้นนั้นเลย

.play basics/variables-with-initializers.go

* การประกาศตัวแปรแบบย่อ

ในฟังก์ชั่นมีการใช้ `:=` เป็นการประกาศตัวแปรแบบย่อ สามารถใช้แทนการประกาศด้วย `var` ได้ ซึ่งจะได้รับชนิดตัวแปรโดยปริยาย

ส่วนการประกาศตัวแปรนอกฟังก์ชั่น ต้องเริ่มต้นด้วยคำเฉพาะ (`var`, `func` และอื่น ๆ) และไม่สามารถใช้ `:=` ได้

.play basics/short-variable-declarations.go

* ชนิดตัวแปรพื้นฐาน

ตัวแปรพื้นฐานของภาษาโกมีดังนี้

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // นามแฝงของ uint8

	rune // alias for int32
	     // ใช้อ้างถึง Unicode

	float32 float64

	complex64 complex128

ตามตัวอย่างจะแสดงตัวแปรหลากหลายชนิด และแน่นอนว่ามันก็สามารถ รวบ การประกาศเป็นกลุ่มได้ เหมือนกับการนำเข้าแพ็กเกจ

ชนิดของตัวแปรแบบ `int`, `uint` และ `uintptr` ปกติจะมี 32 บิต บนระบบที่เป็น 32 บิต และจะเป็น 64 บิต บนระบบที่เป็น 64 บิต
ถ้าต้องการค่าตัวเลขจำนวนเต็ม ควรใช้ `int` เว้นแต่ว่าคุณจะมีเหตุผลบางอย่างที่จะต้องระบุขนาดหรือค่าสัมบูรณ์ให้ชนิดตัวแปรนั้น

.play basics/basic-types.go

* ค่าว่าง

ตัวแปรที่ถูกประกาศและไม่ได้ให้ค่าเบื้องต้นไว้ มันจะถูกกำหนด _ค่าว่าง_ ให้

ค่าว่างคือ:

- `0` สำหรับตัวแปรที่เป็นตัวเลข
- `false` สำหรับตัวแปรแบบนิพจน์ และ
- `""` (ข้อความเปล่า) สำหรับตัวแปรชนิดข้อความ

.play basics/zero.go

* การแปลงชนิดของตัวแปร

กระบวนท่า `T(v)` คือการแปลงค่า `v` ไปเป็นชนิดตัวแปรแบบ `T`

การแปลงค่าตัวเลขบางชนิด:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

หรือจะลองแบบย่อ:

	i := 42
	f := float64(i)
	u := uint(f)

ซึ่งจะแตกต่างจากภาษาซี เพราะในภาษาโก การส่งค่าระหว่างของคนละชนิดกันจำเป็นจะต้องแปลงชนิดก่อน
ทดลองเอาการแปลงชนิด `float64` หรือ `uint` ออกแล้วลองดูว่าจะเกิดอะไรขึ้น

.play basics/type-conversions.go

* การอนุมานชนิดตัวแปร

เวลาที่ประกาศตัวแปรโดยไม่ระบุชนิด (ไม่ว่าจะใช้รูปแบบ `:=` หรือรูปแบบ `var`=`) ชนิดของตัวแปรจะได้จากการอนุมานเอาจากค่าที่ระบุทางขวามือ

ถ้าหากค่าทางขวามีชนิดอยู่แล้ว ตัวแปรใหม่จะได้ชนิดตัวแปรเดียวกัน:

	var i int
	j := i // j จะมีชนิดเป็น int

แต่ถ้าหากว่าค่าทางฝั่งขวาเป็นตัวเลขที่ไม่ระบุชนิด ตัวแปรใหม่อาจจะเป็น `int`, `float64` หรือ `complex128` ขึ้นอยู่กับความความแม่นยำของการให้ค่านั้น ๆ :

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

ทดลองแก้ค่า `v` ในตัวอย่างแล้วสังเกตว่าจะส่งผลกระทบถึงชนิดตัวแปรอย่างไร

.play basics/type-inference.go

* ค่าคงที่

ค่าคงที่ถูกประกาศแบบเดียวกับตัวแปร แต่จะใช้คำเฉพาะว่า `const`

ค่าคงที่สามารถเป็น ตัวอักษร ข้อความ นิพจน์ หรือตัวเลขก็ได้

ค่าคงที่ไม่สามารถประกาศด้วย `:=` ได้

.play basics/constants.go

* ค่าคงที่ตัวเลข

ค่าคงที่ตัวเลข เป็น _ค่า_ ความแม่นยำสูง

ค่าคงที่ที่ไม่ระบุชนิดจะได้ชนิดตามบริบทของมัน

ทดลองพิมพ์ `needInt(Big)` เพิ่มเข้าไปด้วย

(ตัวแปรชนิด `int` สามารถเก็บตัวเลขได้สูงสุด 64 บิต และน้อยกว่าในบางครั้ง)

.play basics/numeric-constants.go

* ยินดีด้วย!

คุณจบบทนี้แล้ว!

คุณสามารถย้อนกลับไปดูรายการทั้งหมดของ [[/list][modules]] เพื่อดูว่าจะเรียนอะไรต่อไป หรือไปต่อที่ [[javascript:click('.next-page')][บทต่อไป]].
