Concurrency
ภาษาโกมีความสามารถในการสร้าง concurrency เป็นส่วนหลักของภาษา บทเรียนนี้จะแสดงวิธีการสร้างนั้นให้ดู และแสดงตัวอย่างว่าจะเรียกใช้มันได้อย่างไร

The Go Authors
https://golang.org

* Goroutines

_goroutine_ คือการจัดการเธรดแบบกระทัดรัด โดยใช้รันไทม์ของภาษาโก

	go f(x, y, z)

เริ่มต้น goroutine ทำงาน

	f(x, y, z)

การประเมิณค่า `f`, `x`, `y`, และ `z` จะเกิดขึ้นที่ goroutine ปัจจุบัน ส่วนการกระทำจริงของ `f` จะเกิดที่ goroutine ตัวใหม่

goroutine จะทำงานที่แอดเดรสเดียวกัน ดังนั้นการเข้าถึงหน่วยความจำ จึงต้องเป็นแบบสอดคล้องกันเป็นลำดับ กรณีนี้ แพ็กเกจ [[https://golang.org/pkg/sync/][`sync`]] คือวิธีแบบดั้งเดิมที่จะช่วยคุณจัดการได้ เว้นแต่ว่าคุณจะไม่ต้องการวิธีนั้น ในภาษาโก เรามีวิธีอื่น (ดูหน้าถัดไป)

.play concurrency/goroutines.go

* Channels

channel เป็นช่องที่เจาะผ่านไปถึงชนิดของตัวแปรใด ๆ ที่จะทำให้คุณส่งและรับค่าด้วยการใช้สัญลักษณ์ `<-`

	ch <- v    // ส่งค่า v เข้าไปทางช่อง ch
	v := <-ch  // รับค่าจากช่อง ch
	           // มาเก็บไว้ที่ v

(การไหลของข้อมูลจะมีทิศทางตามลูกศร)

เช่นเดียวกันกับ map และ slice เราจะต้องสร้าง channel ก่อนนำไปใช้งาน:

	ch := make(chan int)

โดยปกติ การส่งและรับจะบล็อกจนกว่าอีกฝั่งหนึ่งจะพร้อม เจ้าสิ่งนี้จะยอมให้ goroutine ทำงานสอดคล้องกันได้โดยไม่ต้องล็อคอย่างจงใจ โดยให้ทำงานตามสภาพที่มันเป็น

โค้ดในตัวอย่าง คือการรวมค่าตัวเลขใน slice โดยจะแจกงานออกไปให้ goroutine สองตัวทำ
เมื่อทั้งสองตัวคำนวณเสร็จ มันจึงจะคำนวณผลรวมออกมา

.play concurrency/channels.go

* Buffered Channels

channel สามารถเป็น _ที่พักข้อมูล_ ได้ ด้วยการใส่ขนาดที่ต้องการสำรองข้อมูลลงไปในอาร์กิวเม้นต์ตัวที่สองของ `make` แล้วมันจะสร้าง channel ตามที่มีขนาดที่พักเท่ากับจำนวนนั้นขึ้นมา:

	ch := make(chan int, 100)

การส่งข้อมูลเข้าไปใน channel แบบนี้ จะบล็อกถ้าหากว่ามันเต็ม และบล็อกเมื่อพยายามจะดึงข้อมูลในขณะที่มันว่าง

ทดลองแก้ไขตัวอย่างโดยใส่ค่าเกินจำนวนที่สามารถเก็บได้ แล้วดูผลที่เกิดขึ้น

.play concurrency/buffered-channels.go

* Range and Close

ผู้ส่ง สามารถสั่ง `close` channel ได้ เพื่อทำให้รู้ว่าไม่มีข้อมูลจะส่งให้แล้ว ฝั่งที่รับ สามารถทดสอบว่า channel นั้นปิดไปหรือยังด้วยการรับค่าที่สอง

	v, ok := <-ch

`ok` จะเป็น `false` ถ้าหากว่าไม่มีค่ามาอีกแล้วและ channel โดนปิด

และการวนลูป `for`i`:=`range`c` คือการรับค่าจาก channel ไปเรื่อย ๆ จนกว่ามันจะถูกปิด

*ข้อสังเกต:* ฝั่งที่เป็นผู้ส่งข้อมูลเท่านั้นที่ควรเป็นฝ่ายปิด channel ไม่ควรเป็นฝั่งผู้รับ เพราะถ้าผู้ส่ง พยายามส่งข้อมูลเข้าไปใน channel ที่ปิดไปแล้ว จะทำให้ panic

*ข้อสังเกต*อีกอย่าง*: channel ไม่ใช่ไฟล์ คุณไม่จำเป็นต้องปิดมัน การสั่งปิดมันจะจำเป็นก็ต่อเมื่อ ฝั่งรับจำเป็นต้องถูกแจ้งให้รู้จริง ๆ ว่าจะไม่มีค่าส่งมาแล้ว ยกตัวอย่างเช่น เพื่อให้จบลูป `range`

.play concurrency/range-and-close.go

* Select

การใช้ `select` จะใช้กรณีที่ต้องการรอ channel หลาย ๆ ตัวจาก goroutine

`select` จะบล็อก จนกว่าตัวใดตัวหนึ่งกลับมาจึงจะทำตามกรณีนั้น แต่ถ้ากลับมาพร้อม ๆ กันมันจะสุ่มเลือกเพียงตัวเดียว

.play concurrency/select.go

* Default Selection

กรณีที่เป็น `default` ใน `select` จะถูกทำเมื่อกรณีอื่น ๆ ยังไม่พร้อม หรือยังไม่มีของกลับมา

ทดลองใช้ `default` ส่งหรือรับโดยไม่ถูกบล็อก

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* แบบฝึกหัด: Equivalent Binary Trees

ในที่นี้สามารถมีหลาย binary tree ที่แตกต่างกันแต่เก็บค่าเหมือนกัน ตัวอย่างเช่น มีสอง binary tree ที่เก็บค่าตามลำดับแบบนี้ 1, 1, 2, 3, 5, 8, 13

.image /content/img/tree.png

การจะสร้างฟังก์ชั่นสักหนึ่งตัวมาตรวจสอบว่า สอง binary tree นี้เก็บค่าเหมือนกันหรือไม่นั้น ค่อนข้างซับซ้อนมากในภาษาส่วนใหญ่ เราเลยจะมาลองใช้ วิธีการทำงานพร้อมกัน (concurrency) และ channel ของภาษาโก เขียนมันขึ้นมาด้วยวิธีการง่าย ๆ

ตัวอย่างนี้ใช้แพ็กเกจ `tree` ที่มีชนิดตัวแปร:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


อธิบายต่อที่ [[javascript:click('.next-page')][หน้าถัดไป]]

* แบบฝึกหัด: Equivalent Binary Trees

*1.* ทำฟังก์ชั่น `Walk` ให้เสร็จ

*2.* ทดสอบฟังก์ชั่น `Walk`

ฟังก์ชั่น `tree.New(k)` จะสร้าง binary tree แบบสุ่มโครงสร้างขึ้นมา พร้อมค่าดังนี้ `k`, `2k`, `3k`, ..., `10k`

สร้าง channel ใหม่ขึ้นมาตัวหนึ่งชื่อ `ch` แล้วปล่อยตัว walker ออกไป

	go Walk(tree.New(1), ch)

จากนั้นให้อ่านและพิมพ์ค่าทั้ง 10 จาก channel ซึ่งมันควรจะเป็นตัวเลข 1, 2, 3, ..., 10

*3.* ทำฟังก์ชั่น `Same` ให้เสร็จด้วยการใช้ `Walk` เพื่อตัดสินว่า `t1` และ `t2` เก็บค่าเดียวกันไว้หรือไม่

*4.* ทดสอบฟังก์ชั่น `Same`

`Same(tree.New(1),`tree.New(1))` ควรคืนค่า true และ `Same(tree.New(1),`tree.New(2))` ควรคืนค่า false

เอกสารของ `Tree` สามารถดูได้ [[https://godoc.org/golang.org/x/tour/tree#Tree][ที่นี่]]

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

เราได้เห็นสุดยอดวิธีการสื่อสารระหว่าง goroutine ไปแล้ว

แต่ถ้าเกิดเราไม่ได้อยากจะสื่อสารล่ะ ถ้าเราแค่อยากจะมั่นใจว่า
goroutine สักตัวจะเข้าถึงตัวแปรในเวลาที่ไม่ขัดแย้งกับใครก็พอแล้ว

แนวคิดนี้มีชื่อเรียกว่า _mutual_exclusion_ และชื่อที่เรามักจะนำมาตั้งให้กับโครงสร้างข้อมูลนี้ก็คือ _mutex_ 

ไลบรารี่มาตรฐานของภาษาโกมี mutual exclusion อยู่แล้ว
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] และมันมีสองเมธอด:

- `Lock`
- `Unlock`

เราสามารถสร้างเขตของโค้ดในการทำ mutual exclusion โดยครอบส่วนนั้นไว้ด้วย
การเรียกใช้ `Lock` และ `Unlock` แบบที่แสดงให้เห็นในเมธอด `Inc`

เราสามารถใช้ `defer` เพื่อให้มั่นใจว่า mutex จะถูกปลดล็อคแน่นอน แบบที่เห็นในเมธอด `Value`

.play concurrency/mutex-counter.go

* แบบฝึกหัด: Web Crawler

ในแบบฝึกหัดนี้ คุณจะใช้คุณสมบัติการทำงานพร้อม ๆ กันของภาษาโก ในการรวบรวมข้อมูลจากเว็บ พร้อมกันจากหลาย ๆ ที่

ให้แก้ไขฟังก์ชั่น `Crawl` ให้ทำการดึงเอา URL หลาย ๆ ตัวมาพร้อมกัน โดยไม่ดึงมาซ้ำกันสองครั้ง

_คำใบ้_: คุณสามารถเก็บ URL ที่เคยดึงมาแล้วไว้ใน map แต่ map แค่ตัวเดียวจะไม่ปลอดภัยกับการทำงานพร้อมกัน!

.play concurrency/exercise-web-crawler.go

* จากนี้จะไปที่ไหนต่อ

#appengine: คุณสามารถเริ่มต้นที่
#appengine: [[https://golang.org/dl/][การติดตั้งภาษาโก]].

#appengine: เมื่อคุณได้ติดตั้งภาษาโกแล้ว
[[https://golang.org/doc/][เอกสารอ้างอิงของภาษาโก]] เป็นที่ที่ดีที่จะ
#appengine: ไปต่อ
เริ่มต้น
มันรวบรวมแหล่งอ้างอิง สื่อการสอน วีดีโอ และอื่น ๆ ไว้มากมาย

วิธีการจัดระเบียบโค้กภาษาโก ดูที่ [[https://www.youtube.com/watch?v=XCsL89YtqCs][this screencast]] or read [[https://golang.org/doc/code.html][How to Write Go Code]]

ถ้าคุณต้องการความช่วยเหลือเกี่ยวกับไลบรารี่มาตรฐาน ดูได้ที่ [[https://golang.org/pkg/][package reference]] สำหรับความช่วยเหลือเกี่ยวกับตัวภาษาเอง คุณอาจจะประหลาดใจที่ได้พบกับ [[https://golang.org/ref/spec][Language Spec]] เพราะมันอ่านง่ายมาก

ไปสำรวจลักษณะการทำงานแบบ concurrency ของภาษาโก ดูได้ที่
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][slides]])
และ
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][slides]])
และอ่าน
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]]
codewalk

หากต้องการเริ่มต้นเขียน web applications ดูได้ที่ 
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slides]])
และอ่าน บทเรียน
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]]

[[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]] codewalk ให้แง่มุมที่น่าสนใจเกี่ยวกับ ชนิดตัวแปรแบบฟังก์ชั่นของภาษาโก

[[https://blog.golang.org/][Go Blog]] มีบทความของภาษาโกอยู่เยอะมาก

เยี่ยมชม [[https://golang.org][golang.org]] สำหรับข้อมูลเพิ่มเติม

